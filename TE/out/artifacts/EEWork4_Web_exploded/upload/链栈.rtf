{\rtf1\ansi\ansicpg936\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset134 PingFangSC-Regular;}
{\colortbl;\red255\green255\blue255;\red100\green56\blue32;\red196\green26\blue22;\red28\green0\blue207;
\red170\green13\blue145;\red0\green116\blue0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab529
\pard\tx529\pardeftab529\pardirnatural\partightenfactor0

\f0\fs22 \cf2 \CocoaLigature0 #include \cf3 <stdio.h>\cf2 \
#include \cf3 <stdlib.h>\cf2 \
\cf0 \
\cf2 #define STACK_INIT_SIZE \cf4 2\cf2 \
#define STACKINCREMENT \cf4 10\cf2 \
#define OVERFLOW -\cf4 1\cf2 \
#define OK \cf4 1\cf2 \
#define ERROR \cf4 0\cf2 \
\cf0 \
\cf5 typedef\cf0  \cf5 int\cf0  Status;\
\cf5 typedef\cf0  \cf5 int\cf0  SElemType;\
\
\cf5 typedef\cf0  \cf5 struct\cf0 \{\
    SElemType *base;\
    SElemType *top;\
    \cf5 int\cf0  stacksize;\
\}SqStack;\
\
Status InitStack(SqStack *S)\
\{   \cf6 /*\
     
\f1 \'b4\'b4\'bd\'a8\'bf\'d5\'d5\'bb
\f0 \
     
\f1 \'b4\'ab\'c8\'eb\'b2\'ce\'ca\'fd\'ce\'aa
\f0 SqStack
\f1 \'d0\'cd\'bd\'e1\'b9\'b9\'cc\'e5
\f0 S
\f1 \'b5\'c4\'b5\'d8\'d6\'b7
\f0 \
     */\cf0 \
    S->base = (SElemType *)malloc(STACK_INIT_SIZE * \cf5 sizeof\cf0 (SElemType));\
    \cf5 if\cf0  (!S->base)\
        exit(OVERFLOW);\
    S->top = S->base;\
    S->stacksize = STACK_INIT_SIZE;\
    \
    \cf5 return\cf0  OK;\
\}\
\
Status DestroyStack(SqStack *S)\
\{   \cf6 /*\
     
\f1 \'cf\'fa\'bb\'d9\'d5\'bb
\f0 \
     
\f1 \'b4\'ab\'c8\'eb\'b2\'ce\'ca\'fd\'ce\'aa
\f0 SqStack
\f1 \'d0\'cd\'bd\'e1\'b9\'b9\'cc\'e5
\f0 S
\f1 \'b5\'c4\'b5\'d8\'d6\'b7
\f0 \
     */\cf0 \
    free(S->base);\
    S->base = \cf5 NULL\cf0 ;\
    S->top = \cf5 NULL\cf0 ;\
    S->stacksize = \cf4 0\cf0 ;\
    \
    \cf5 return\cf0  OK;\
\}\
\
Status ClearStack(SqStack *S)\
\{\
    \cf6 /*\
     
\f1 \'c7\'e5\'bf\'d5\'d5\'bb
\f0 \
     
\f1 \'b4\'ab\'c8\'eb\'b2\'ce\'ca\'fd\'ce\'aa
\f0 SqStack
\f1 \'d0\'cd\'bd\'e1\'b9\'b9\'cc\'e5
\f0 S
\f1 \'b5\'c4\'b5\'d8\'d6\'b7
\f0 \
     */\cf0 \
    S->top = S->base;\
    \
    \cf5 return\cf0  OK;\
\}\
\
Status Push(SqStack *S, SElemType e)\
\{   \cf6 /*\
     
\f1 \'c8\'eb\'d5\'bb
\f0 \
     
\f1 \'b4\'ab\'c8\'eb\'b2\'ce\'ca\'fd\'ce\'aa
\f0 SqStack
\f1 \'d0\'cd\'bd\'e1\'b9\'b9\'cc\'e5
\f0 S
\f1 \'b5\'c4\'b5\'d8\'d6\'b7\'a3\'ac
\f0 SElemType
\f1 \'d0\'cd\'b2\'ce\'ca\'fd
\f0 e
\f1 \'b5\'c4\'d6\'b5
\f0 \
     */\cf0 \
    \cf5 if\cf0  (S->top - S->base >= S->stacksize)\
    \{\
        S->base = (SElemType *)realloc(S->base,\
                  (S->stacksize + STACKINCREMENT) * \cf5 sizeof\cf0 (SElemType));\
        \cf5 if\cf0  (!S->base)\
            exit(OVERFLOW);\
        S->top = S->base + S->stacksize;\
        S->stacksize += STACKINCREMENT;\
    \}\
    *S->top = e;\
    S->top++;\
    \
    \cf5 return\cf0  OK;\
\}\
\
Status Pop(SqStack *S, SElemType *e)\
\{   \cf6 /*\
     
\f1 \'b3\'f6\'d5\'bb
\f0 \
     
\f1 \'b4\'ab\'c8\'eb\'b2\'ce\'ca\'fd\'ce\'aa
\f0 SqStack
\f1 \'d0\'cd\'bd\'e1\'b9\'b9\'cc\'e5
\f0 S
\f1 \'b5\'c4\'b5\'d8\'d6\'b7\'a3\'ac
\f0 SElemType
\f1 \'d0\'cd\'b2\'ce\'ca\'fd
\f0 e
\f1 \'b5\'c4\'b5\'d8\'d6\'b7
\f0 \
     */\cf0 \
    \cf5 if\cf0  (S->top == S->base)\
        \cf5 return\cf0  ERROR;\
    S->top--;\
    *e = *S->top;\
    *S->top = \cf4 0\cf0 ;\
    \
    \cf5 return\cf0  OK;\
\}\
\
Status GetTop(SqStack S, SElemType *e)\
\{   \cf6 /*\
     
\f1 \'bb\'f1\'c8\'a1\'d5\'bb\'b6\'a5\'d4\'aa\'cb\'d8\'a3\'ac
\f0 top
\f1 \'d6\'b8\'d5\'eb\'ce\'b4\'b1\'e4\'bb\'af
\f0 \
     
\f1 \'b4\'ab\'c8\'eb\'b2\'ce\'ca\'fd\'ce\'aa
\f0 SqStack
\f1 \'d0\'cd\'bd\'e1\'b9\'b9\'cc\'e5
\f0 S
\f1 \'a3\'ac
\f0 SElemType
\f1 \'d0\'cd\'b2\'ce\'ca\'fd
\f0 e
\f1 \'b5\'c4\'b5\'d8\'d6\'b7
\f0 \
     */\cf0 \
    \cf6 //
\f1 \'bd\'e1\'b9\'b9\'cc\'e5\'c8\'f4\'ce\'aa\'d6\'b8\'d5\'eb\'d4\'f2\'b2\'e9\'bf\'b4\'d2\'d4\'bc\'b0\'d0\'de\'b8\'c4\'d6\'b5\'a3\'ac\'b8\'f1\'ca\'bd\'ce\'aa
\f0 S->variable\cf0 \
    \cf6 //
\f1 \'c8\'f4\'ce\'aa\'bd\'e1\'b9\'b9\'cc\'e5\'c3\'fb\'b3\'c6\'d4\'f2\'d6\'bb\'c4\'dc\'b2\'e9\'bf\'b4\'b2\'bb\'c4\'dc\'d0\'de\'b8\'c4\'a3\'ac\'b8\'f1\'ca\'bd\'ce\'aa
\f0 S.varibale\cf0 \
    \cf5 if\cf0 (S.top == S.base)\
        \cf5 return\cf0  ERROR;\
    S.top--;\
    *e = *S.top;\
    \cf5 return\cf0  OK;\
\}\
\
Status StackEmpty(SqStack S)\
\{\
    \cf5 if\cf0  (S.top == S.base)\
        \cf5 return\cf0  OK;\
    \cf5 else\cf0 \
        \cf5 return\cf0  ERROR;\
\}\
\
\cf5 int\cf0  StackLength(SqStack S)\
\{\
    \cf5 return\cf0  (S.top - S.base);\
\}\
\
Status PrintElem(SElemType e)\
\{\
    printf(\cf3 "%d\\t"\cf0 , e);\
    \
    \cf5 return\cf0  OK;\
\}\
\
Status StackTraverse(SqStack S, Status(*visit)(SElemType))\
\{\
    SElemType *p;\
    p = S.base;\
    \cf5 while\cf0  (p != S.top)\
    \{\
        \cf5 if\cf0  (!visit(*p))\
            \cf5 return\cf0  ERROR;\
        p++;\
    \}\
    \
    \cf5 return\cf0  OK;\
\}\
\
\
\cf5 int\cf0  main() \{\
    SqStack S;\
    \cf5 int\cf0  a = \cf4 0\cf0 ;\
    SElemType *e = &a;\
    \cf5 int\cf0  n, i;\
    InitStack(&S);\
    printf(\cf3 "
\f1 \'c7\'eb\'ca\'e4\'c8\'eb\'d0\'e8\'d2\'aa\'c8\'eb\'d5\'bb\'b5\'c4\'ca\'fd\'be\'dd\'b8\'f6\'ca\'fd
\f0 :"\cf0 );\
    scanf(\cf3 "%d"\cf0 , &n);\
    printf(\cf3 "
\f1 \'d2\'c0\'b4\'ce\'ca\'e4\'c8\'eb\'d0\'e8\'d2\'aa\'c8\'eb\'d5\'bb\'b5\'c4\'ca\'fd
\f0 \\n"\cf0 );\
    \cf5 for\cf0  (i = \cf4 0\cf0 ; i < n; i++)\
    \{\
        scanf(\cf3 "%d"\cf0 , e);\
        Push(&S, *e);\
    \}\
    \cf6 /*\
    printf("
\f1 \'d5\'bb\'b5\'c4\'b1\'e9\'c0\'fa
\f0 \\n");\
    StackTraverse(S, PrintElem);\
    printf("\\n
\f1 \'d5\'bb\'b5\'c4\'b3\'a4\'b6\'c8\'ce\'aa
\f0 : %d\\n", StackLength(S));\
    printf("
\f1 \'b7\'b5\'bb\'d8\'d5\'bb\'b6\'a5\'d4\'aa\'cb\'d8
\f0 : ");\
    GetTop(S, e);\
    printf("%d\\n", *e);\
     */\cf0 \
    printf(\cf3 "
\f1 \'d4\'aa\'cb\'d8\'b3\'f6\'d5\'bb\'ba\'f3
\f0 \\n"\cf0 );\
    \cf5 while\cf0 (!StackEmpty(S))\
    \{\
        Pop(&S, e);\
        printf(\cf3 "%d\\n"\cf0 , *e);\
    \}\
    \cf5 if\cf0  (DestroyStack(&S) && StackEmpty(S))\
        printf(\cf3 "
\f1 \'c8\'ab\'b2\'bf\'b9\'fd\'b3\'cc\'cd\'ea\'b3\'c9\'a3\'ac\'d5\'bb\'cf\'fa\'bb\'d9\'b3\'c9\'b9\'a6\'a1\'a3
\f0 \\n"\cf0 );\
    \cf5 else\cf0 \
        printf(\cf3 "
\f1 \'d5\'bb\'cf\'fa\'bb\'d9\'ca\'a7\'b0\'dc
\f0 .\\n"\cf0 );\
    \
    \cf5 return\cf0  \cf4 0\cf0 ;\
\}}